" :help <foobar> for explanations

source ~/.vim/plugins.vim
source ~/.vim/filetypes.vim
source ~/.vim/key_mappings.vim
source ~/.vim/color_scheme.vim

" enable true-color output
" https://gist.github.com/XVilka/8346728
set termguicolors
" see ":help xterm-true-color", our $TERM needs this
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set textwidth=80
set number
set nowrap
set fillchars+=vert:â”‚ " nicer vertical line
set backspace=indent,eol,start " backspace as expected
set grepprg=rg\ --vimgrep\ --smart-case " ripgrep has to be installed
set timeoutlen=3000 " Give me more time remembering my complex mappings ;-)
set hidden " hide a buffer instead of closing it
           " â‡’ switch buffers even with the actual unsaved
set autoread
set list
set listchars=tab:â–¸Â·,trail:Â·,precedes:â—…,extends:â–»,nbsp:â€¢
set nofoldenable
set scrolloff=5

" TODO Prio 2: does not work yet inside tmux
" https://stackoverflow.com/questions/15123477/tmux-tabs-with-name-of-file-open-in-vim
set title

" Indentation http://vim.wikia.com/wiki/Indenting_source_code
set expandtab " expand tab key presses to spaces
set softtabstop=2 " tabstops are two spaces
set shiftwidth=2 " width of autoindentation

" TODO: shiftround?

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Mouse
set mouse=a
set ttymouse=xterm2 " resize splits with mouse when inside tmux session

" ALE
let g:ale_sign_error = 'â˜ '
let g:ale_sign_warning = 'ðŸš½'
let g:ale_echo_msg_error_str = 'â˜  '
let g:ale_echo_msg_warning_str = 'ðŸš½ '
let g:ale_echo_msg_format = '%severity% %code: %%s'

" Airline
let g:airline_powerline_fonts=1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_skip_empty_sections = 1
let g:airline#extensions#ale#error_symbol =  'â˜   '
let g:airline#extensions#ale#warning_symbol = 'ðŸš½ '
" Disabling is a test in combination with <Leader>bb and disabeling of <Leader>w
let g:airline#extensions#tabline#enabled = 0

set noshowmode " airline now shows the active mode
augroup airline_changes
  autocmd!
  autocmd WinLeave * :let w:airline_render_right=0
augroup END

" vim-gitgutter
set updatetime=100 " show the git changes earlier

" NERDTree
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeHijackNetrw=0 " NERDTree annoys me when using 'vim .'

" Better indentation in NERDTree
" https://github.com/ryanoasis/vim-devicons/issues/248
" https://github.com/scrooloose/nerdtree/issues/848
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
let g:DevIconsEnableFoldersOpenClose = 1
" Disable arrow icons at the left side of folders for NERDTree.
let g:NERDTreeDirArrowExpandable = "\u00a0"
let g:NERDTreeDirArrowCollapsible = "\u00a0"

augroup nerdtree
  autocmd!

  " Close Vim if the only window left open is a NERDTree
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

  " Strip trailing whitespace when saving files
  autocmd BufWritePre * :%s/\s\+$//e
augroup END

" CtrlP
let g:ctrlp_user_command = 'rg %s --files --follow --color=never --glob ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_mruf_relative = 1
let g:ctrlp_tjump_only_silent = 1

" Open quickfix window after grep, open with full-width
augroup grep
  autocmd!
  autocmd QuickFixCmdPost *grep* botright cwindow
augroup END

" cursorline
set cursorline

" ... just in active buffer
" https://stackoverflow.com/questions/12017331/how-can-i-make-vim-highlight-the-current-line-on-only-the-active-buffer
augroup CursorLine
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

" vim-test
function! VimtestOwnStrategy(cmd)
  botright new
  call term_start(['/bin/sh', '-c', a:cmd], {'curwin':1})

  " Do not focus test window, stay in last file
  call feedkeys("\<C-w>\<C-p>")
endfunction
let g:test#custom_strategies = {
  \ 'own': function('VimtestOwnStrategy')
  \ }
let g:test#strategy = 'own'

" Show marker after 80 characters, but not for every buffer and file type.
set colorcolumn=81
augroup ColorColumn
  autocmd!
  autocmd TerminalOpen *
    \ if &buftype == 'terminal'
    \|  setlocal colorcolumn=
    \|endif
augroup END

" Don't enable gutentags for all directories containing a ".git" marker.
" Only start the CPU meltdown in project directories containing a configuration
" file.
let g:gutentags_project_root = ['.gutctags']
let g:gutentags_add_default_project_roots = 0
